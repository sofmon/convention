package api_test

import (
	"fmt"
	"io"
	"net/http"
	"strings"
	"testing"
	"time"

	convAPI "github.com/sofmon/convention/v2/go/api"
	convAuth "github.com/sofmon/convention/v2/go/auth"
	convCtx "github.com/sofmon/convention/v2/go/ctx"
)

func Test_openapi_empty(t *testing.T) {
	checkOpenAPI(
		t,
		&struct {
			GetOpenAPI convAPI.OpenAPI `api:"GET /test/v1/openapi.yaml"`
		}{},
		`openapi: 3.0.0
info:
	title: API
	version: 1.0.0
paths:
	/test/v1/openapi.yaml:
		get:
			responses:
				'200':
					description: OK`,
	)
}

func Test_openapi_metadata(t *testing.T) {
	checkOpenAPI(
		t,
		&struct {
			GetOpenAPI convAPI.OpenAPI `api:"GET /test/v1/openapi.yaml"`
		}{
			GetOpenAPI: convAPI.NewOpenAPI().
				WithDescription(
					"This is a test OpenAPI generated by the convention library",
				).
				WithServers(
					"https://api.sofmon.com/test/v1",
				),
		},
		`openapi: 3.0.0
info:
	title: API
	version: 1.0.0
	description: This is a test OpenAPI generated by the convention library
servers:
	- url: https://api.sofmon.com/test/v1
paths:
	/test/v1/openapi.yaml:
		get:
			responses:
				'200':
					description: OK`,
	)
}

func Test_openapi_simple_types(t *testing.T) {

	type AllSimpleTypes struct {
		BoolField    bool
		IntField     int
		Int8Field    int8
		Int16Field   int16
		Int32Field   int32
		Int64Field   int64
		UintField    uint
		Uint8Field   uint8
		Uint16Field  uint16
		Uint32Field  uint32
		Uint64Field  uint64
		Float32Field float32
		Float64Field float64
		StringField  string
	}

	checkOpenAPI(
		t,
		&struct {
			GetOpenAPI       convAPI.OpenAPI                               `api:"GET /test/v1/openapi.yaml"`
			PostSimpleObject convAPI.InOut[AllSimpleTypes, AllSimpleTypes] `api:"POST /test/v1/simple_object"`
		}{},
		`openapi: 3.0.0
info:
	title: API
	version: 1.0.0
components:
	schemas:
		all_simple_types:
			type: object
			properties:
				bool_field:
					type: boolean
				float32_field:
					type: number
				float64_field:
					type: number
				int16_field:
					type: integer
				int32_field:
					type: integer
				int64_field:
					type: integer
				int8_field:
					type: integer
				int_field:
					type: integer
				string_field:
					type: string
				uint16_field:
					type: integer
				uint32_field:
					type: integer
				uint64_field:
					type: integer
				uint8_field:
					type: integer
				uint_field:
					type: integer
			required:
				- bool_field
				- float32_field
				- float64_field
				- int16_field
				- int32_field
				- int64_field
				- int8_field
				- int_field
				- string_field
				- uint16_field
				- uint32_field
				- uint64_field
				- uint8_field
				- uint_field
paths:
	/test/v1/openapi.yaml:
		get:
			responses:
				'200':
					description: OK
	/test/v1/simple_object:
		post:
			requestBody:
				content:
					application/json:
						schema:
							$ref: '#/components/schemas/all_simple_types'
			responses:
				'200':
					description: OK
					content:
						application/json:
							schema:
								$ref: '#/components/schemas/all_simple_types'`,
	)
}

func Test_openapi_enums_in_object(t *testing.T) {

	type Enum string

	const (
		EnumValue1 Enum = "enum_value_1"
		EnumValue2 Enum = "enum_value_2"
	)

	type InObject struct {
		EnumField Enum
	}

	checkOpenAPI(
		t,
		&struct {
			GetOpenAPI convAPI.OpenAPI      `api:"GET /test/v1/openapi.yaml"`
			PostEnum   convAPI.In[InObject] `api:"POST /test/v1/enum"`
		}{
			GetOpenAPI: convAPI.NewOpenAPI().
				WithEnums(
					convAPI.NewEnum(
						EnumValue1,
						EnumValue2,
					),
				),
		},
		`openapi: 3.0.0
info:
	title: API
	version: 1.0.0
components:
	schemas:
		enum:
			type: string
			enum:
				- enum_value_1
				- enum_value_2
		in_object:
			type: object
			properties:
				enum_field:
					$ref: '#/components/schemas/enum'
			required:
				- enum_field
paths:
	/test/v1/enum:
		post:
			requestBody:
				content:
					application/json:
						schema:
							$ref: '#/components/schemas/in_object'
			responses:
				'200':
					description: OK
	/test/v1/openapi.yaml:
		get:
			responses:
				'200':
					description: OK`,
	)
}

func Test_openapi_enums_directly(t *testing.T) {
	t.Skip("Not implemented")
}

func Test_openapi_substitution(t *testing.T) {

	type ComplexMarshallObject struct {
		ComplexMarshallObjectField int
	}

	type SubstitutionObject struct {
		SubstitutionObjectField int
	}

	checkOpenAPI(
		t,
		&struct {
			GetOpenAPI                convAPI.OpenAPI                                             `api:"GET /test/v1/openapi.yaml"`
			PostComplexMarshallObject convAPI.InOut[ComplexMarshallObject, ComplexMarshallObject] `api:"POST /test/v1/complex_marshall_object"`
		}{
			GetOpenAPI: convAPI.NewOpenAPI().
				WithTypeSubstitutions(
					convAPI.NewTypeSubstitution[ComplexMarshallObject, SubstitutionObject](),
				),
		},
		`openapi: 3.0.0
info:
	title: API
	version: 1.0.0
components:
	schemas:
		complex_marshall_object:
			type: object
			properties:
				substitution_object_field:
					type: integer
			required:
				- substitution_object_field
paths:
	/test/v1/complex_marshall_object:
		post:
			requestBody:
				content:
					application/json:
						schema:
							$ref: '#/components/schemas/complex_marshall_object'
			responses:
				'200':
					description: OK
					content:
						application/json:
							schema:
								$ref: '#/components/schemas/complex_marshall_object'
	/test/v1/openapi.yaml:
		get:
			responses:
				'200':
					description: OK`,
	)
}

func Test_openapi_substitution_anonymous(t *testing.T) {

	type ComplexMarshallObject struct {
		ComplexMarshallObjectField int
	}

	checkOpenAPI(
		t,
		&struct {
			GetOpenAPI                convAPI.OpenAPI                                             `api:"GET /test/v1/openapi.yaml"`
			PostComplexMarshallObject convAPI.InOut[ComplexMarshallObject, ComplexMarshallObject] `api:"POST /test/v1/complex_marshall_object"`
		}{
			GetOpenAPI: convAPI.NewOpenAPI().
				WithTypeSubstitutions(
					convAPI.NewTypeSubstitution[
						ComplexMarshallObject,
						struct {
							SubstitutionObjectField int
						},
					](),
				),
		},
		`openapi: 3.0.0
info:
	title: API
	version: 1.0.0
components:
	schemas:
		complex_marshall_object:
			type: object
			properties:
				substitution_object_field:
					type: integer
			required:
				- substitution_object_field
paths:
	/test/v1/complex_marshall_object:
		post:
			requestBody:
				content:
					application/json:
						schema:
							$ref: '#/components/schemas/complex_marshall_object'
			responses:
				'200':
					description: OK
					content:
						application/json:
							schema:
								$ref: '#/components/schemas/complex_marshall_object'
	/test/v1/openapi.yaml:
		get:
			responses:
				'200':
					description: OK`,
	)
}

func Test_openapi_recursive(t *testing.T) {

	type RecursiveObject struct {
		RecursiveObjectField *RecursiveObject
	}

	checkOpenAPI(
		t,
		&struct {
			GetOpenAPI          convAPI.OpenAPI                                 `api:"GET /test/v1/openapi.yaml"`
			PostRecursiveObject convAPI.InOut[RecursiveObject, RecursiveObject] `api:"POST /test/v1/recursive_object"`
		}{},
		`openapi: 3.0.0
info:
	title: API
	version: 1.0.0
components:
	schemas:
		recursive_object:
			type: object
			properties:
				recursive_object_field:
					$ref: '#/components/schemas/recursive_object'
paths:
	/test/v1/openapi.yaml:
		get:
			responses:
				'200':
					description: OK
	/test/v1/recursive_object:
		post:
			requestBody:
				content:
					application/json:
						schema:
							$ref: '#/components/schemas/recursive_object'
			responses:
				'200':
					description: OK
					content:
						application/json:
							schema:
								$ref: '#/components/schemas/recursive_object'`,
	)
}

func Test_openapi_multiple_methods(t *testing.T) {

	checkOpenAPI(
		t,
		&struct {
			GetOpenAPI convAPI.OpenAPI `api:"GET /test/v1/openapi.yaml"`

			GetString    convAPI.Out[string]           `api:"GET /test/v1/string"`
			PutString    convAPI.In[string]            `api:"PUT /test/v1/string"`
			PostString   convAPI.InOut[string, string] `api:"POST /test/v1/string"`
			DeleteString convAPI.Out[string]           `api:"DELETE /test/v1/string"`
		}{},
		`openapi: 3.0.0
info:
	title: API
	version: 1.0.0
paths:
	/test/v1/openapi.yaml:
		get:
			responses:
				'200':
					description: OK
	/test/v1/string:
		get:
			responses:
				'200':
					description: OK
					content:
						application/json:
							schema:
								$ref: '#/components/schemas/string'
		put:
			requestBody:
				content:
					application/json:
						schema:
							$ref: '#/components/schemas/string'
			responses:
				'200':
					description: OK
		post:
			requestBody:
				content:
					application/json:
						schema:
							$ref: '#/components/schemas/string'
			responses:
				'200':
					description: OK
					content:
						application/json:
							schema:
								$ref: '#/components/schemas/string'
		delete:
			responses:
				'200':
					description: OK
					content:
						application/json:
							schema:
								$ref: '#/components/schemas/string'`,
	)
}

func Test_openapi_array_directly_simple(t *testing.T) {

	checkOpenAPI(
		t,
		&struct {
			GetOpenAPI convAPI.OpenAPI `api:"GET /test/v1/openapi.yaml"`

			GetSimpleArray convAPI.Out[[]int] `api:"GET /test/v1/simple_array"`
		}{},
		`openapi: 3.0.0
info:
	title: API
	version: 1.0.0
components:
	schemas:
		list_of_int:
			type: array
			items:
				type: integer
paths:
	/test/v1/openapi.yaml:
		get:
			responses:
				'200':
					description: OK
	/test/v1/simple_array:
		get:
			responses:
				'200':
					description: OK
					content:
						application/json:
							schema:
								$ref: '#/components/schemas/list_of_int'`,
	)
}

func Test_openapi_array_directly_complex(t *testing.T) {

	type Object struct {
		IntField int
	}

	checkOpenAPI(
		t,
		&struct {
			GetOpenAPI convAPI.OpenAPI `api:"GET /test/v1/openapi.yaml"`

			GetCustomArray convAPI.Out[[]Object] `api:"GET /test/v1/custom_array"`
		}{},
		`openapi: 3.0.0
info:
	title: API
	version: 1.0.0
components:
	schemas:
		list_of_object:
			type: array
			items:
				$ref: '#/components/schemas/object'
		object:
			type: object
			properties:
				int_field:
					type: integer
			required:
				- int_field
paths:
	/test/v1/custom_array:
		get:
			responses:
				'200':
					description: OK
					content:
						application/json:
							schema:
								$ref: '#/components/schemas/list_of_object'
	/test/v1/openapi.yaml:
		get:
			responses:
				'200':
					description: OK`,
	)
}

func Test_openapi_array_directly_enum(t *testing.T) {

	type Enum string

	const (
		EnumValue1 Enum = "enum_value_1"
		EnumValue2 Enum = "enum_value_2"
	)

	checkOpenAPI(
		t,
		&struct {
			GetOpenAPI convAPI.OpenAPI `api:"GET /test/v1/openapi.yaml"`

			GetSimpleArray convAPI.Out[[]Enum] `api:"GET /test/v1/simple_array"`
		}{
			GetOpenAPI: convAPI.NewOpenAPI().WithEnums(convAPI.NewEnum(EnumValue1, EnumValue2)),
		},
		`openapi: 3.0.0
info:
	title: API
	version: 1.0.0
components:
	schemas:
		enum:
			type: string
			enum:
				- enum_value_1
				- enum_value_2
		list_of_enum:
			type: array
			items:
				$ref: '#/components/schemas/enum'
paths:
	/test/v1/openapi.yaml:
		get:
			responses:
				'200':
					description: OK
	/test/v1/simple_array:
		get:
			responses:
				'200':
					description: OK
					content:
						application/json:
							schema:
								$ref: '#/components/schemas/list_of_enum'`,
	)
}

func Test_openapi_anonymous_fields(t *testing.T) {

	type AnonymousObject struct {
		IntField    int
		StringField string
	}

	type ParentObject struct {
		AnonymousObject
		FloatField float64
	}

	checkOpenAPI(
		t,
		&struct {
			GetOpenAPI             convAPI.OpenAPI           `api:"GET /test/v1/openapi.yaml"`
			GetObjectWithAnonymous convAPI.Out[ParentObject] `api:"GET /test/v1/object_with_anonymous"`
		}{},
		`openapi: 3.0.0
info:
	title: API
	version: 1.0.0
components:
	schemas:
		parent_object:
			type: object
			properties:
				float_field:
					type: number
				int_field:
					type: integer
				string_field:
					type: string
			required:
				- float_field
				- int_field
				- string_field
paths:
	/test/v1/object_with_anonymous:
		get:
			responses:
				'200':
					description: OK
					content:
						application/json:
							schema:
								$ref: '#/components/schemas/parent_object'
	/test/v1/openapi.yaml:
		get:
			responses:
				'200':
					description: OK`,
	)
}

func checkOpenAPI(t *testing.T, api any, expectedOpenAPI string) {

	ctx := convCtx.New(convAuth.Claims{
		User: "testOpenAPI",
	})

	authConfig := convAuth.Config{
		Public: convAuth.Actions{
			"GET /test/v1/openapi.yaml",
		},
	}

	srv, err := convAPI.NewServer(ctx, "localhost", portForAPITest(t), authConfig, api)
	if err != nil {
		t.Errorf("NewServer() = %v; want nil", err)
	}

	go srv.ListenAndServe()

	time.Sleep(10 * time.Millisecond)

	res, err := http.Get(fmt.Sprintf("https://localhost:%d/test/v1/openapi.yaml", portForAPITest(t)))
	if err != nil {
		t.Errorf("http.Get() = %v; want nil", err)
	}
	if res == nil {
		t.Errorf("http.Get() = %v; want nil", res)
	}

	if res.StatusCode != http.StatusOK {
		t.Errorf("GET test/v1/openAPI.yaml = %v; want %v", res.StatusCode, http.StatusOK)
	}

	bytes, _ := io.ReadAll(res.Body)
	resultingOpenAPI := string(bytes)
	resultingOpenAPI = strings.ReplaceAll(resultingOpenAPI, "  ", "	")

	resultingOpenAPI = strings.TrimSpace(resultingOpenAPI)
	expectedOpenAPI = strings.TrimSpace(expectedOpenAPI)

	if resultingOpenAPI != expectedOpenAPI {
		t.Errorf("GET test/v1/openAPI.yaml = %v; want %v", resultingOpenAPI, expectedOpenAPI)
	}

	go srv.Shutdown(ctx)
}
