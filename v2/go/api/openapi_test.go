package api_test

import (
	"fmt"
	"io"
	"net/http"
	"strings"
	"testing"
	"time"

	convAPI "github.com/sofmon/convention/v2/go/api"
	convAuth "github.com/sofmon/convention/v2/go/auth"
	convCtx "github.com/sofmon/convention/v2/go/ctx"
)

type Enum string

const (
	EnumValue1 Enum = "enum_value_1"
	EnumValue2 Enum = "enum_value_2"
)

type ComplexMarshallObject struct {
	unexportedField1 string
	unexportedField2 int
	ExportedField    int
}

type SubstitutionObject struct {
	ShowField1 int
	ShowField2 *float64
	EnumField  Enum
}

func Test_openapi_substitution(t *testing.T) {

	agentCtx := convCtx.New(convAuth.Claims{
		User: "Test_openapi_substitution",
	})

	go func() {
		err := convAPI.ListenAndServe(agentCtx, "localhost", 12346, authConfig,
			&struct {
				GetOpenAPI      convAPI.OpenAPI                                             `api:"GET /test/v1/openapi.yaml"`
				GetCustomObject convAPI.InOut[ComplexMarshallObject, ComplexMarshallObject] `api:"GET /test/v1/customObject"`
			}{
				GetOpenAPI: convAPI.NewOpenAPI().
					WithDescription(
						"This is a test OpenAPI generated by the convention library",
					).
					WithServers(
						"https://localhost:12346",
					).
					WithTypeSubstitutions(
						convAPI.NewTypeSubstitution[ComplexMarshallObject, SubstitutionObject](),
					).
					WithEnums(
						convAPI.NewEnum[Enum](
							EnumValue1,
							EnumValue2,
						),
					),
			},
		)
		if err != nil {
			t.Errorf("ListenAndServe() = %v; want nil", err)
		}
	}()

	time.Sleep(10 * time.Millisecond) // give time for the agent api to start

	resp, err := http.Get("https://localhost:12346/test/v1/openapi.yaml")
	if err != nil {
		t.Errorf("http.Get() = %v; want nil", err)
	}

	if resp.StatusCode != http.StatusOK {
		t.Errorf("GET test/v1/openAPI.yaml = %v; want %v", resp.StatusCode, http.StatusOK)
	}

	bytes, _ := io.ReadAll(resp.Body)

	fmt.Println(string(bytes))

	if !strings.Contains(string(bytes), "show_field1") {
		t.Errorf("GET test/v1/openAPI.yaml = %v; want %v", string(bytes), "show_field1")
	}

	if !strings.Contains(string(bytes), "show_field2") {
		t.Errorf("GET test/v1/openAPI.yaml = %v; want %v", string(bytes), "show_field2")
	}
}
